// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.1
// source: user.proto

package user_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	// Add friends method
	GetUserByLogin(ctx context.Context, in *GetUserByLoginIn, opts ...grpc.CallOption) (*GetUserByLoginOut, error)
	IsUserExistByUUID(ctx context.Context, in *IsUserExistByUUIDIn, opts ...grpc.CallOption) (*IsUserExistByUUIDOut, error)
	GetUserInfoByUUID(ctx context.Context, in *GetUserInfoByUUIDIn, opts ...grpc.CallOption) (*GetUserInfoByUUIDOut, error)
	GetLoginByUUID(ctx context.Context, in *GetLoginByUUIDIn, opts ...grpc.CallOption) (*GetLoginByUUIDOut, error)
	GetUserWithLimit(ctx context.Context, in *GetUserWithLimitIn, opts ...grpc.CallOption) (*GetUserWithLimitOut, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) GetUserByLogin(ctx context.Context, in *GetUserByLoginIn, opts ...grpc.CallOption) (*GetUserByLoginOut, error) {
	out := new(GetUserByLoginOut)
	err := c.cc.Invoke(ctx, "/UserService/GetUserByLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) IsUserExistByUUID(ctx context.Context, in *IsUserExistByUUIDIn, opts ...grpc.CallOption) (*IsUserExistByUUIDOut, error) {
	out := new(IsUserExistByUUIDOut)
	err := c.cc.Invoke(ctx, "/UserService/IsUserExistByUUID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserInfoByUUID(ctx context.Context, in *GetUserInfoByUUIDIn, opts ...grpc.CallOption) (*GetUserInfoByUUIDOut, error) {
	out := new(GetUserInfoByUUIDOut)
	err := c.cc.Invoke(ctx, "/UserService/GetUserInfoByUUID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetLoginByUUID(ctx context.Context, in *GetLoginByUUIDIn, opts ...grpc.CallOption) (*GetLoginByUUIDOut, error) {
	out := new(GetLoginByUUIDOut)
	err := c.cc.Invoke(ctx, "/UserService/GetLoginByUUID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserWithLimit(ctx context.Context, in *GetUserWithLimitIn, opts ...grpc.CallOption) (*GetUserWithLimitOut, error) {
	out := new(GetUserWithLimitOut)
	err := c.cc.Invoke(ctx, "/UserService/GetUserWithLimit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility
type UserServiceServer interface {
	// Add friends method
	GetUserByLogin(context.Context, *GetUserByLoginIn) (*GetUserByLoginOut, error)
	IsUserExistByUUID(context.Context, *IsUserExistByUUIDIn) (*IsUserExistByUUIDOut, error)
	GetUserInfoByUUID(context.Context, *GetUserInfoByUUIDIn) (*GetUserInfoByUUIDOut, error)
	GetLoginByUUID(context.Context, *GetLoginByUUIDIn) (*GetLoginByUUIDOut, error)
	GetUserWithLimit(context.Context, *GetUserWithLimitIn) (*GetUserWithLimitOut, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (UnimplementedUserServiceServer) GetUserByLogin(context.Context, *GetUserByLoginIn) (*GetUserByLoginOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByLogin not implemented")
}
func (UnimplementedUserServiceServer) IsUserExistByUUID(context.Context, *IsUserExistByUUIDIn) (*IsUserExistByUUIDOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsUserExistByUUID not implemented")
}
func (UnimplementedUserServiceServer) GetUserInfoByUUID(context.Context, *GetUserInfoByUUIDIn) (*GetUserInfoByUUIDOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfoByUUID not implemented")
}
func (UnimplementedUserServiceServer) GetLoginByUUID(context.Context, *GetLoginByUUIDIn) (*GetLoginByUUIDOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLoginByUUID not implemented")
}
func (UnimplementedUserServiceServer) GetUserWithLimit(context.Context, *GetUserWithLimitIn) (*GetUserWithLimitOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserWithLimit not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_GetUserByLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByLoginIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserByLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserService/GetUserByLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserByLogin(ctx, req.(*GetUserByLoginIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_IsUserExistByUUID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsUserExistByUUIDIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).IsUserExistByUUID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserService/IsUserExistByUUID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).IsUserExistByUUID(ctx, req.(*IsUserExistByUUIDIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserInfoByUUID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfoByUUIDIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserInfoByUUID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserService/GetUserInfoByUUID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserInfoByUUID(ctx, req.(*GetUserInfoByUUIDIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetLoginByUUID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLoginByUUIDIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetLoginByUUID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserService/GetLoginByUUID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetLoginByUUID(ctx, req.(*GetLoginByUUIDIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserWithLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserWithLimitIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserWithLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserService/GetUserWithLimit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserWithLimit(ctx, req.(*GetUserWithLimitIn))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserByLogin",
			Handler:    _UserService_GetUserByLogin_Handler,
		},
		{
			MethodName: "IsUserExistByUUID",
			Handler:    _UserService_IsUserExistByUUID_Handler,
		},
		{
			MethodName: "GetUserInfoByUUID",
			Handler:    _UserService_GetUserInfoByUUID_Handler,
		},
		{
			MethodName: "GetLoginByUUID",
			Handler:    _UserService_GetLoginByUUID_Handler,
		},
		{
			MethodName: "GetUserWithLimit",
			Handler:    _UserService_GetUserWithLimit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
